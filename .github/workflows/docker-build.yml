name: üê≥ Docker Build & Publish

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
    paths:
      - 'collector/**'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'collector/**'
      - 'docker-compose.yml'
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build for'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string
      push_images:
        description: 'Push images to registries'
        required: false
        default: true
        type: boolean

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: postman-governance

jobs:
  prepare:
    name: üîß Prepare Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      image-tag: ${{ steps.meta.outputs.image-tag }}
      should-push: ${{ steps.meta.outputs.should-push }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        run: |
          # Determine if we should push images
          SHOULD_PUSH=false
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop" || "${{ github.ref }}" =~ ^refs/tags/v) ]]; then
            SHOULD_PUSH=true
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.push_images }}" == "true" ]]; then
            SHOULD_PUSH=true
          fi
          
          # Determine image tag
          IMAGE_TAG="latest"
          if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            IMAGE_TAG="develop"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IMAGE_TAG="pr-${{ github.event.number }}"
          fi
          
          echo "should-push=${SHOULD_PUSH}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Set build matrix
        id: set-matrix
        run: |
          PLATFORMS="${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}"
          
          # Create matrix for parallel builds
          MATRIX='{"include":['
          
          # Always include amd64
          MATRIX+='{
            "platform": "linux/amd64",
            "platform-short": "amd64",
            "runner": "ubuntu-latest"
          }'
          
          # Add arm64 if specified
          if [[ "$PLATFORMS" =~ "linux/arm64" ]]; then
            MATRIX+=',{
              "platform": "linux/arm64",
              "platform-short": "arm64", 
              "runner": "ubuntu-latest"
            }'
          fi
          
          MATRIX+=']}'
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './collector/Dockerfile'
          format: 'sarif'
          output: 'trivy-dockerfile.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-dockerfile.sarif'

  build:
    name: üèóÔ∏è Build
    runs-on: ${{ matrix.runner }}
    needs: [prepare, security-scan]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}
          driver-opts: |
            network=host

      - name: Login to Docker Hub
        if: needs.prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: needs.prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}-collector
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-collector
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.prepare.outputs.image-tag }}
          labels: |
            org.opencontainers.image.title=Postman Governance Collector
            org.opencontainers.image.description=Secure data collector for Postman API governance metrics
            org.opencontainers.image.vendor=Postman Governance Team
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.platform=${{ matrix.platform }}

      - name: Build and push collector image
        uses: docker/build-push-action@v5
        with:
          context: ./collector
          platforms: ${{ matrix.platform }}
          push: ${{ needs.prepare.outputs.should-push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.platform-short }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform-short }}
          provenance: true
          sbom: true
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Test image locally
        if: matrix.platform == 'linux/amd64'
        run: |
          # Test that the image runs and is healthy
          IMAGE_ID=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep postman-governance-collector | head -1)
          
          if [[ -n "$IMAGE_ID" ]]; then
            echo "Testing image: $IMAGE_ID"
            
            # Run container briefly to test
            docker run --rm -d --name test-collector \
              -e POSTMAN_API_KEY=test-key \
              -e NODE_ENV=development \
              "$IMAGE_ID"
            
            # Wait for startup
            sleep 10
            
            # Check if container is running
            if docker ps | grep -q test-collector; then
              echo "‚úÖ Container started successfully"
              
              # Test health endpoint if possible
              CONTAINER_IP=$(docker inspect test-collector | jq -r '.[0].NetworkSettings.IPAddress')
              if curl -f "http://${CONTAINER_IP}:3001/health" 2>/dev/null; then
                echo "‚úÖ Health endpoint responding"
              else
                echo "‚ö†Ô∏è Health endpoint not ready (expected for test)"
              fi
              
              # Cleanup
              docker stop test-collector
            else
              echo "‚ùå Container failed to start"
              docker logs test-collector
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No image found for testing"
          fi

  vulnerability-scan:
    name: üõ°Ô∏è Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: needs.prepare.outputs.should-push == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY_GHCR }}/${{ github.repository }}-collector:${{ needs.prepare.outputs.image-tag }}'
          format: 'sarif'
          output: 'trivy-image.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image.sarif'

      - name: Run Trivy vulnerability scanner for summary
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY_GHCR }}/${{ github.repository }}-collector:${{ needs.prepare.outputs.image-tag }}'
          format: 'table'

  manifest:
    name: üìã Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.should-push == 'true'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          TAG="${{ needs.prepare.outputs.image-tag }}"
          
          # Create manifests for Docker Hub
          docker manifest create \
            "${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}-collector:${TAG}" \
            --amend "${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}-collector:${TAG}"
          
          docker manifest push "${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}-collector:${TAG}"
          
          # Create manifests for GHCR
          docker manifest create \
            "${{ env.REGISTRY_GHCR }}/${{ github.repository }}-collector:${TAG}" \
            --amend "${{ env.REGISTRY_GHCR }}/${{ github.repository }}-collector:${TAG}"
          
          docker manifest push "${{ env.REGISTRY_GHCR }}/${{ github.repository }}-collector:${TAG}"

  summary:
    name: üìä Build Summary
    runs-on: ubuntu-latest
    needs: [prepare, build, vulnerability-scan, manifest]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# üê≥ Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.prepare.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Push**: ${{ needs.prepare.outputs.should-push }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.prepare.outputs.should-push }}" == "true" ]]; then
            echo "## Published Images" >> $GITHUB_STEP_SUMMARY
            echo "- üê≥ \`${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}-collector:${{ needs.prepare.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- üì¶ \`${{ env.REGISTRY_GHCR }}/${{ github.repository }}-collector:${{ needs.prepare.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Usage" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}-collector:${{ needs.prepare.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Build Only" >> $GITHUB_STEP_SUMMARY
            echo "Images were built but not pushed (PR or non-main branch)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.vulnerability-scan.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Manifest: ${{ needs.manifest.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY