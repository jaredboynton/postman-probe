name: 🚀 Release Package

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  security-events: write
  actions: read

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: postman-governance

jobs:
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'

      - name: Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Security audit npm dependencies
        working-directory: ./collector
        run: |
          npm audit --audit-level=moderate

  test-deployment:
    name: 🧪 Test Deployment
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment
        run: |
          cp .env.example .env
          echo "POSTMAN_API_KEY=test-key-for-build" >> .env

      - name: Build images
        run: |
          docker compose build

      - name: Test container security
        run: |
          # Test non-root execution
          docker compose run --rm collector id
          docker compose run --rm grafana id

      - name: Validate configuration
        run: |
          # Test configuration loading
          docker compose run --rm collector node -e "console.log('Config validation passed')"

  build-and-package:
    name: 📦 Build and Package
    runs-on: ubuntu-latest
    needs: [security-scan, test-deployment]
    outputs:
      version: ${{ steps.version.outputs.version }}
      package-name: ${{ steps.package.outputs.name }}
      checksum: ${{ steps.package.outputs.checksum }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Create package structure
        id: package
        run: |
          VERSION=${{ steps.version.outputs.version }}
          PACKAGE_NAME="postman-governance-stack-${VERSION}"
          
          # Create package directory
          mkdir -p package/${PACKAGE_NAME}
          
          # Copy core files
          cp -r config package/${PACKAGE_NAME}/
          cp -r collector package/${PACKAGE_NAME}/
          cp docker-compose.yml package/${PACKAGE_NAME}/
          cp .env.example package/${PACKAGE_NAME}/
          cp setup.sh package/${PACKAGE_NAME}/
          cp test-deployment.sh package/${PACKAGE_NAME}/
          cp security-scan.sh package/${PACKAGE_NAME}/
          cp README.md package/${PACKAGE_NAME}/
          
          # Create additional files
          cat > package/${PACKAGE_NAME}/LICENSE << 'EOF'
          MIT License
          
          Copyright (c) 2025 Postman Governance Team
          
          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:
          
          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.
          
          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.
          EOF
          
          # Create CHANGELOG
          cat > package/${PACKAGE_NAME}/CHANGELOG.md << EOF
          # Changelog
          
          All notable changes to the Postman Governance Stack will be documented in this file.
          
          ## [${VERSION}] - $(date +%Y-%m-%d)
          
          ### Added
          - Complete Docker-based governance monitoring stack
          - Automated Postman API data collection with rate limiting
          - SQLite-based historical data storage
          - Pre-built Grafana dashboards for governance insights
          - Security-hardened container deployment
          - Comprehensive setup and validation scripts
          
          ### Security
          - Non-root container execution
          - Docker secrets management
          - API key masking in logs
          - Security scanning integration
          - Vulnerability assessment tools
          
          ### Documentation
          - Complete installation and configuration guide
          - Security best practices documentation
          - Troubleshooting and operational procedures
          - API reference and integration examples
          EOF
          
          # Create utility scripts
          mkdir -p package/${PACKAGE_NAME}/scripts
          
          # Backup script
          cat > package/${PACKAGE_NAME}/scripts/backup.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "🗄️  Creating Postman Governance Stack Backup"
          BACKUP_DIR="backup-$(date +%Y%m%d-%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          # Backup database
          if docker compose exec -T collector test -f /app/data/governance.db; then
              docker compose exec -T collector sqlite3 /app/data/governance.db ".backup /app/data/backup.db"
              docker compose cp collector:/app/data/backup.db "$BACKUP_DIR/governance.db"
              echo "✅ Database backed up"
          fi
          
          # Backup configuration
          cp -r config "$BACKUP_DIR/"
          cp .env "$BACKUP_DIR/" 2>/dev/null || echo "No .env file to backup"
          
          # Create archive
          tar -czf "${BACKUP_DIR}.tar.gz" "$BACKUP_DIR"
          rm -rf "$BACKUP_DIR"
          
          echo "✅ Backup created: ${BACKUP_DIR}.tar.gz"
          EOF
          
          # Restore script
          cat > package/${PACKAGE_NAME}/scripts/restore.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          if [[ $# -ne 1 ]]; then
              echo "Usage: $0 <backup-file.tar.gz>"
              exit 1
          fi
          
          BACKUP_FILE="$1"
          echo "🔄 Restoring Postman Governance Stack from $BACKUP_FILE"
          
          # Extract backup
          tar -xzf "$BACKUP_FILE"
          BACKUP_DIR="${BACKUP_FILE%.tar.gz}"
          
          # Stop services
          docker compose down
          
          # Restore database
          if [[ -f "$BACKUP_DIR/governance.db" ]]; then
              docker compose cp "$BACKUP_DIR/governance.db" collector:/app/data/governance.db
              echo "✅ Database restored"
          fi
          
          # Restore configuration
          if [[ -d "$BACKUP_DIR/config" ]]; then
              cp -r "$BACKUP_DIR/config"/* config/
              echo "✅ Configuration restored"
          fi
          
          # Start services
          docker compose up -d
          
          # Cleanup
          rm -rf "$BACKUP_DIR"
          
          echo "✅ Restore completed"
          EOF
          
          # Upgrade script
          cat > package/${PACKAGE_NAME}/scripts/upgrade.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "⬆️  Upgrading Postman Governance Stack"
          
          # Backup current installation
          echo "Creating backup before upgrade..."
          ./scripts/backup.sh
          
          # Pull latest images
          docker compose pull
          
          # Restart services
          docker compose down
          docker compose up -d
          
          # Wait for health
          echo "Waiting for services to be healthy..."
          sleep 30
          
          # Verify health
          if curl -sf http://localhost:3001/health > /dev/null 2>&1; then
              echo "✅ Upgrade completed successfully"
          else
              echo "❌ Upgrade failed - check logs with: docker compose logs"
              exit 1
          fi
          EOF
          
          # Make scripts executable
          chmod +x package/${PACKAGE_NAME}/scripts/*.sh
          chmod +x package/${PACKAGE_NAME}/*.sh
          
          # Create tarball
          cd package
          tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}"
          
          # Generate checksums
          sha256sum "${PACKAGE_NAME}.tar.gz" > "${PACKAGE_NAME}.tar.gz.sha256"
          
          echo "name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "checksum=$(sha256sum ${PACKAGE_NAME}.tar.gz | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: |
            package/*.tar.gz
            package/*.sha256
          retention-days: 30

  build-docker-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, test-deployment]
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}-collector
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-collector
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push collector image
        uses: docker/build-push-action@v5
        with:
          context: ./collector
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [build-and-package, build-docker-images]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-package
          path: ./release-assets

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION=${{ needs.build-and-package.outputs.version }}
          
          cat > release-notes.md << EOF
          # Postman Governance Stack ${VERSION}
          
          ## 🚀 What's New
          
          A comprehensive Docker-based solution for monitoring and analyzing Postman API governance metrics with automated data collection, historical tracking, and rich visualizations.
          
          ## 📦 Installation
          
          ### Quick Start
          \`\`\`bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/${{ needs.build-and-package.outputs.package-name }}.tar.gz
          tar -xzf ${{ needs.build-and-package.outputs.package-name }}.tar.gz
          cd ${{ needs.build-and-package.outputs.package-name }}
          
          # Run automated setup
          ./setup.sh
          \`\`\`
          
          ### Docker Images
          \`\`\`bash
          # Pull pre-built images
          docker pull ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}-collector:${VERSION}
          docker pull ${{ env.REGISTRY_GHCR }}/${{ github.repository }}-collector:${VERSION}
          \`\`\`
          
          ## 🔒 Security
          
          - Package checksum: \`${{ needs.build-and-package.outputs.checksum }}\`
          - All images scanned for vulnerabilities
          - Non-root container execution
          - Secrets management with Docker secrets
          
          ## 📊 Features
          
          - ✅ Automated Postman API governance data collection
          - ✅ SQLite-based historical data storage
          - ✅ Pre-built Grafana dashboards
          - ✅ Security-hardened Docker deployment
          - ✅ Comprehensive validation and testing scripts
          - ✅ Multi-architecture Docker images (amd64, arm64)
          
          ## 🛠️ System Requirements
          
          - Docker Engine 20.10+
          - Docker Compose 2.0+
          - 4GB+ RAM, 10GB+ disk space
          - Valid Postman API key
          
          ## 📚 Documentation
          
          - [Installation Guide](./README.md)
          - [Security Guide](./security-scan.sh)
          - [Troubleshooting](./test-deployment.sh)
          
          ## 🆘 Support
          
          - Report issues: [GitHub Issues](${{ github.server_url }}/${{ github.repository }}/issues)
          - Documentation: [README.md](./README.md)
          - Security: Run \`./security-scan.sh\` for validation
          EOF
          
          echo "release-notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.build-and-package.outputs.version }}
          name: Postman Governance Stack ${{ needs.build-and-package.outputs.version }}
          body: ${{ steps.release-notes.outputs.release-notes }}
          artifacts: |
            release-assets/*.tar.gz
            release-assets/*.sha256
          draft: false
          prerelease: false
          generateReleaseNotes: false

  post-release:
    name: 📢 Post Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-package]
    steps:
      - name: Verify release
        run: |
          VERSION=${{ needs.build-and-package.outputs.version }}
          PACKAGE_NAME=${{ needs.build-and-package.outputs.package-name }}
          
          echo "✅ Release created successfully!"
          echo "🏷️  Version: ${VERSION}"
          echo "📦 Package: ${PACKAGE_NAME}.tar.gz"
          echo "🔗 URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${VERSION}"
          
          # Test download
          curl -L -o test-download.tar.gz \
            "https://github.com/${{ github.repository }}/releases/download/${VERSION}/${PACKAGE_NAME}.tar.gz"
          
          # Verify checksum
          echo "${{ needs.build-and-package.outputs.checksum }}  test-download.tar.gz" | sha256sum -c -
          
          echo "✅ Package download and checksum verification successful!"